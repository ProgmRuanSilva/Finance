{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/components/progress/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react'\nimport { StyleSheet, ViewStyle, View } from 'react-native'\nimport { MotiTransitionProp, useDynamicAnimation, motify } from '../../core'\n\nconst MotiView = motify(View)()\n\nexport type MotiProgressBarProps = {\n  /**\n   * Number between 0-1\n   *\n   * @requires\n   */\n  progress: number\n  /**\n   * Height of the bar in pixels.\n   *\n   * @default `12`\n   */\n  height?: number\n  color?: string\n  containerColor?: string\n  /**\n   * Container border radius\n   */\n  borderRadius?: number\n  containerStyle?: ViewStyle\n  style?: ViewStyle\n  /**\n   * Transition for the animation. See the `transition` docs from Moti's `<MotiView />` to see how to use it.\n   *\n   * @default\n   * ```jsx\n   * {\n   *  type: 'timing',\n   *  duration: 300,\n   * }\n   * ```\n   */\n  transition?: MotiTransitionProp<ViewStyle>\n  /**\n   * @default `dark`\n   */\n  colorMode?: 'dark' | 'light'\n  /**\n   * @default false\n   *\n   * When `false`, Moti will warn you if you're re-rendering this component too often.\n   */\n  silenceRenderWarnings?: boolean\n}\n\nexport function MotiProgressBar({\n  height = 12,\n  progress = 0,\n  borderRadius = height / 2,\n  style,\n  colorMode = 'dark',\n  containerColor = colorMode === 'dark' ? '#333' : '#eee',\n  containerStyle,\n  color = '#00C806',\n  transition = {\n    type: 'timing',\n    duration: 200,\n  },\n  silenceRenderWarnings = false,\n}: MotiProgressBarProps) {\n  const barState = useDynamicAnimation(() => ({\n    translateX: '-100%',\n  }))\n\n  // TODO this won't be necessary once Moti memoizes props for you.\n  if (!transition) {\n    console.error(\n      `[moti] <ProgressBar /> \"transition\" prop must be undefined or a Moti transition object, but it got this type instead: ${typeof transition}.`,\n      transition\n    )\n  }\n  const transitionString = JSON.stringify(transition)\n  const _transition = useMemo<typeof transition>(\n    () => JSON.parse(transitionString),\n    [transitionString]\n  )\n\n  const outerStyle = useMemo(\n    () => [\n      styles.container,\n      containerStyle,\n      { height, borderRadius, backgroundColor: containerColor },\n    ],\n    [borderRadius, containerColor, containerStyle, height]\n  )\n\n  const progressStyle = useMemo(\n    () => [style, styles.bar, { borderRadius, backgroundColor: color }],\n    [borderRadius, color, style]\n  )\n\n  useEffect(\n    function animateOnProgressChange() {\n      const percent = Math.round(progress * 100)\n\n      const translateX = `${percent - 100}%`\n      if (barState.current?.translateX !== translateX) {\n        barState.animateTo((current) => ({ ...current, translateX }))\n      }\n    },\n    [barState, progress]\n  )\n\n  const unnecessaryRerenders = useRef({\n    containerStyle: {\n      previousValue: containerStyle,\n      changes: 0,\n    },\n    style: {\n      previousValue: style,\n      changes: 0,\n    },\n  })\n  useEffect(\n    function checkUnnecessaryRerenders() {\n      const isDev = typeof __DEV__ === 'undefined' || __DEV__\n      if (silenceRenderWarnings || !isDev) {\n        return\n      }\n\n      if (\n        containerStyle !==\n        unnecessaryRerenders.current.containerStyle.previousValue\n      ) {\n        unnecessaryRerenders.current.containerStyle.changes += 1\n      }\n      if (style !== unnecessaryRerenders.current.style.previousValue) {\n        unnecessaryRerenders.current.style.changes += 1\n      }\n\n      const warningProps: { changes: number; prop: string }[] = []\n\n      Object.entries(unnecessaryRerenders.current).forEach(\n        ([prop, { changes }]) => {\n          if (changes > 5) {\n            warningProps.push({ prop, changes })\n          }\n        }\n      )\n\n      if (warningProps.length) {\n        console.warn(\n          `[moti] <MotiProgress /> is re-rendering often due to these props: ${warningProps\n            .map(\n              (warning) => `\"${warning.prop}: ${warning.changes} re-renders\"`\n            )\n            .join(\n              ', '\n            )}. This can reduce animation performance. Please memoize these props with useMemo, or create them outside of render code.`,\n          `If you are intentionally re-rendering this often, for some reason, pass silenceRenderWarnings={true} on this component.`\n        )\n      }\n    },\n    [containerStyle, silenceRenderWarnings, style]\n  )\n\n  return useMemo(\n    () => (\n      <View style={outerStyle}>\n        <MotiView\n          transition={_transition}\n          state={barState}\n          style={progressStyle}\n        />\n      </View>\n    ),\n    [_transition, barState, outerStyle, progressStyle]\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    overflow: 'hidden',\n  },\n  bar: {\n    width: '100%',\n    height: '100%',\n  },\n})\n"]}
{"version":3,"file":"motify.js","sourceRoot":"","sources":["../../src/core/motify.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAoC,MAAM,OAAO,CAAA;AAE3E,OAAO,QAIN,MAAM,yBAAyB,CAAA;AAGhC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AAExC,MAAM,EAAE,uBAAuB,EAAE,GAAG,QAAQ,CAAA;AAwB5C,MAAM,CAAC,OAAO,UAAU,MAAM,CAM5B,yBAA+C;IAC/C,MAAM,SAAS,GAAG,uBAAuB,CACvC,yBAAqD,CACtD,CAAA;IAED,MAAM,cAAc,GAAG,GAAG,EAAE;QAC1B,MAAM,QAAQ,GAAG,UAAU,CAQzB,SAAS,IAAI,CACb,EACE,OAAO,EACP,KAAK,EACL,IAAI,EACJ,UAAU,EACV,KAAK,EACL,KAAK,EACL,aAAa,EACb,YAAY,EACZ,IAAI,EACJ,mBAAmB,EACnB,cAAc,EACd,GAAG,KAAK,EACT,EACD,GAAG;YAEH,MAAM,QAAQ,GAAG,SAAS,CAAC;gBACzB,OAAO;gBACP,IAAI;gBACJ,UAAU;gBACV,KAAK;gBACL,KAAK;gBACL,aAAa;gBACb,YAAY;gBACZ,IAAI;gBACJ,cAAc;gBACd,mBAAmB;aACpB,CAAC,CAAA;YAEF,OAAO,CACL,oBAAC,SAAS,oBACH,KAAa,IAClB,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EACvD,GAAG,EAAE,GAAU,IACf,CACH,CAAA;QACH,CAAC,CAAC,CAAA;QAEF,QAAQ,CAAC,WAAW,GAAG,QACrB,yBAAyB,CAAC,WAAW;YACrC,yBAAyB,CAAC,IAAI;YAC9B,QACF,EAAE,CAAA;QAEF,OAAO,QAAQ,CAAA;IACjB,CAAC,CAAA;IAED,OAAO,cAAc,CAAA;AACvB,CAAC","sourcesContent":["import React, { forwardRef, ComponentType, FunctionComponent } from 'react'\nimport type { ImageStyle, TextStyle, ViewStyle } from 'react-native'\nimport Animated, {\n  BaseAnimationBuilder,\n  EntryExitAnimationFunction,\n  LayoutAnimationFunction,\n} from 'react-native-reanimated'\n\nimport type { MotiProps } from './types'\nimport { useMotify } from './use-motify'\n\nconst { createAnimatedComponent } = Animated\n\n// copied from reanimated\n// if we use Animated.AnimateProps\n// then we get this TypeScript error:\n// Exported variable 'View' has or is using name 'AnimatedNode' from external module \"react-native-reanimated\" but cannot be named.\ntype AnimatedProps<Props> = {\n  animatedProps?: Partial<Props>\n  layout?:\n    | BaseAnimationBuilder\n    | LayoutAnimationFunction\n    | typeof BaseAnimationBuilder\n  entering?:\n    | BaseAnimationBuilder\n    | typeof BaseAnimationBuilder\n    | EntryExitAnimationFunction\n    | Keyframe\n  exiting?:\n    | BaseAnimationBuilder\n    | typeof BaseAnimationBuilder\n    | EntryExitAnimationFunction\n    | Keyframe\n}\n\nexport default function motify<\n  Style,\n  Props extends { style?: Style },\n  Ref,\n  ExtraProps,\n  Animate = ViewStyle | ImageStyle | TextStyle\n>(ComponentWithoutAnimation: ComponentType<Props>) {\n  const Component = createAnimatedComponent(\n    ComponentWithoutAnimation as FunctionComponent<Props>\n  )\n\n  const withAnimations = () => {\n    const Motified = forwardRef<\n      Ref,\n      Props &\n        AnimatedProps<Props> &\n        MotiProps<Animate> &\n        ExtraProps & {\n          children?: React.ReactNode\n        }\n    >(function Moti(\n      {\n        animate,\n        style,\n        from,\n        transition,\n        delay,\n        state,\n        stylePriority,\n        onDidAnimate,\n        exit,\n        animateInitialState,\n        exitTransition,\n        ...props\n      },\n      ref\n    ) {\n      const animated = useMotify({\n        animate,\n        from,\n        transition,\n        delay,\n        state,\n        stylePriority,\n        onDidAnimate,\n        exit,\n        exitTransition,\n        animateInitialState,\n      })\n\n      return (\n        <Component\n          {...(props as any)} // TODO\n          style={style ? [style, animated.style] : animated.style}\n          ref={ref as any} // TODO\n        />\n      )\n    })\n\n    Motified.displayName = `Moti.${\n      ComponentWithoutAnimation.displayName ||\n      ComponentWithoutAnimation.name ||\n      'NoName'\n    }`\n\n    return Motified\n  }\n\n  return withAnimations\n}\n"]}
{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/core/use-dynamic-animation/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAA;AACxD,OAAO,EAAE,MAAM,EAAE,MAAM,OAAO,CAAA;AAI9B,MAAM,QAAQ,GAAG,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAA;AAE3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH,MAAM,CAAC,OAAO,UAAU,mBAAmB,CACzC,eAA6B,QAAQ;IAErC,MAAM,WAAW,GAAG,MAAM,CAA8B;QACtD,KAAK,EAAE,IAAW;KACnB,CAAC,CAAA;IACF,IAAI,WAAW,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,EAAE;QACtC,iDAAiD;QACjD,WAAW,CAAC,OAAO,CAAC,KAAK,GAAG,YAAY,EAAE,CAAA;KAC3C;IAED,MAAM,OAAO,GAAG,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;IAEzD,MAAM,UAAU,GAAG,MAAM,EAA4B,CAAA;IAErD,IAAI,UAAU,CAAC,OAAO,IAAI,IAAI,EAAE;QAC9B,UAAU,CAAC,OAAO,GAAG;YACnB,OAAO;YACP,IAAI,OAAO;gBACT,OAAO,OAAO,CAAC,KAAK,CAAA;YACtB,CAAC;YACD,SAAS,CAAC,mBAAmB;gBAC3B,SAAS,CAAA;gBAET,MAAM,SAAS,GACb,OAAO,mBAAmB,KAAK,UAAU;oBACvC,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC,KAAK,CAAC;oBACpC,CAAC,CAAC,mBAAmB,CAAA;gBAEzB,OAAO,CAAC,KAAK,GAAG,SAAS,CAAA;YAC3B,CAAC;SACF,CAAA;KACF;IAED,OAAO,UAAU,CAAC,OAAmC,CAAA;AACvD,CAAC","sourcesContent":["import type { DynamicStyleProp, UseDynamicAnimationState } from '../types'\nimport { useSharedValue } from 'react-native-reanimated'\nimport { useRef } from 'react'\n\ntype InitialState = () => DynamicStyleProp\n\nconst fallback = () => ({})\n\n/**\n * A hook that acts like `useAnimationState`, except that it allows for dynamic values rather than static variants.\n *\n * This is useful when you want to update styles on the fly the way you do with `useState`.\n *\n * You can change the state by calling `state.animateTo()`, and access the current state by calling `state.current`.\n *\n * This hook has high performance, triggers no state changes, and runs fully on the native thread!\n *\n * ```js\n * const dynamicAnimation = useDynamicAnimation({ opacity: 0 })\n *\n * const onPress = () => {\n *   dynamicAnimation.animateTo({ opacity: 1 })\n * }\n *\n * const onMergeStyle = () => {\n *   // or, merge your styles\n *   // this uses the previous state, like useState from react\n *   dynamicAnimation.animateTo((current) => ({ ...current, scale: 1 }))\n *\n *   // you can also synchronously read the current value\n *   // these two options are the same!\n *   dynamicAnimation.animateTo({ ...dynamicAnimation.current, scale: 1 })\n * }\n * ```\n *\n * @param initialState A function that returns your initial style. Similar to `useState`'s initial style.\n */\nexport default function useDynamicAnimation(\n  initialState: InitialState = fallback\n) {\n  const activeStyle = useRef<{ value: DynamicStyleProp }>({\n    value: null as any,\n  })\n  if (activeStyle.current.value === null) {\n    // use a .value to be certain it's never been set\n    activeStyle.current.value = initialState()\n  }\n\n  const __state = useSharedValue(activeStyle.current.value)\n\n  const controller = useRef<UseDynamicAnimationState>()\n\n  if (controller.current == null) {\n    controller.current = {\n      __state,\n      get current(): DynamicStyleProp {\n        return __state.value\n      },\n      animateTo(nextStateOrFunction) {\n        'worklet'\n\n        const nextStyle =\n          typeof nextStateOrFunction === 'function'\n            ? nextStateOrFunction(__state.value)\n            : nextStateOrFunction\n\n        __state.value = nextStyle\n      },\n    }\n  }\n\n  return controller.current as UseDynamicAnimationState\n}\n"]}